Algorithm:

Given:
s - root of binary tree

/*
    assume the following structure for a binary tree
    class Node:
    def __init__(self):
        self.left // already initialized
        self.right // already initialized
        self.leftAmt = None
        self.rightAmt = None
*/

totalNodes = 0

def computeNodeAmounts(root):
    if root == None:
        return 0
    totalNodes += 1
    root.leftAmt = computeNodeAmounts(root.left)
    root.rightAmt = computeNodeAmounts(root.right)
    return 1 + root.leftAmt + root.rightAmt

// we now have all the left tree and right tree node amounts
computeNodeAmounts(s)

def trav(root):
    if root == None:
        return None

    left = root.leftAmt
    right = root.rightAmt
    parent = totalNodes - left - right - 1
    if left <= totalNodes / 2 and right <= totalNodes / 2 and parent <= totalNodes / 2:
        return root

    leftAns = trav(root.left)
    rightAns = trav(root.right)

    if leftAns != None:
        return leftAns
    if rightAns != None:
        return rightAns
    return None