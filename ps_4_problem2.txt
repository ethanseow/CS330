/*
    input is pairs - p
    assume each pair has properties of start and finish
*/
// sort by start time - O(nlogn)
sortedPairs = mergeSort(p)

ans = [sortedPairs[0]]
// O(n^2)
for pair in sortedPairs[1:]:
    // look at the top element - skip the iteration if we do not increase overall time
    if ans[len(ans) - 1].finish < pair.finish:
        continue
    /*
        we are greedily finding the earliest link that can connect with pair, removing any redundant links we find

        O(n)
    */
    deepestLink = -1
    i = len(ans) - 1
    while i > -1:
        link = ans[i] 
        // the link before this is the deepest link - no possible connection to this link
        if pair.start > link.finish:
            break
        // remove redudant links (because our pair is sorted by start time, our start time will be later and thus we can throw away redudant links)
        if pair.start < link.finish:
            // O(1) operation, popping from array
            deepestLink = link
            ans.pop(i)
        i += 1
    // undo the delete of deepestLink - our pair cannot connect to anything before deepestLink
    ans.append(deepestLink)
    // O(1) operation
    ans.append(pair)
// number of sparse and sufficient
return len(ans)


2a.
A = [0,0.4)
B = [0.3, 0.7)
C = [0.6,1)

For the friends answer, we would choose A, skip B because it overalps with A's interval, then choose C because it does not overlap
However, we can have a sparse set of A,B,C if we go to the restaurant at times 0.2, 0.5, 0.9
0.2, we only see waiter A
0.5 we only see waiter B
0.9 we only see waiter C
Thus we can have a sparse set of size 3


2b.



2c

2d. (proof)